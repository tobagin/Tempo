name: Update Flatpak Manifest on Tag

on:
  push:
    tags:
      - 'v*.*.*'  # Matches v1.0.0, v1.2.3, etc.
  workflow_dispatch:

jobs:
  update-manifest:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Extract version info
      id: version
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        COMMIT_HASH=$(git rev-parse $TAG_NAME)
        VERSION=${TAG_NAME#v}
        
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "commit_hash=$COMMIT_HASH" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        echo "üì¶ Processing release: $TAG_NAME"
        echo "üîç Commit hash: $COMMIT_HASH"
        echo "üìà Version: $VERSION"

    - name: Update Flatpak manifest
      id: update
      run: |
        MANIFEST_FILE="packaging/io.github.tobagin.tempo.yml"
        
        if [[ ! -f "$MANIFEST_FILE" ]]; then
          echo "‚ùå Manifest file not found: $MANIFEST_FILE"
          exit 1
        fi
        
        cp "$MANIFEST_FILE" "$MANIFEST_FILE.bak"
        
        # Update the main module section
        python3 << 'EOF'
        import re
        import sys
        
        tag_name = "${{ steps.version.outputs.tag_name }}"
        commit_hash = "${{ steps.version.outputs.commit_hash }}"
        manifest_file = "packaging/io.github.tobagin.tempo.yml"
        
        with open(manifest_file, 'r') as f:
            content = f.read()
        
        # Pattern to match the tempo module source section
        pattern = r'(- name: tempo.*?sources:\s*- type: git\s+url: https://github\.com/tobagin/Tempo\.git\s+tag: )v[\d.]+(.*?\s+commit: )[a-f0-9]+'
        
        replacement = f'\\g<1>{tag_name}\\g<2>{commit_hash}'
        
        updated_content = re.sub(pattern, replacement, content, flags=re.MULTILINE | re.DOTALL)
        
        if updated_content != content:
            with open(manifest_file, 'w') as f:
                f.write(updated_content)
            print("‚úÖ Successfully updated manifest")
            sys.exit(0)
        else:
            print("‚ùå No changes made - pattern not found")
            print("Current content preview:")
            print(content[max(0, content.find('- name: tempo')):content.find('- name: tempo') + 500])
            sys.exit(1)
        EOF
        
        echo "üìã Updated manifest diff:"
        diff -u "$MANIFEST_FILE.bak" "$MANIFEST_FILE" || true
        
        echo "manifest_updated=true" >> $GITHUB_OUTPUT

    - name: Commit manifest changes
      if: steps.update.outputs.manifest_updated == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add packaging/io.github.tobagin.tempo.yml
        git commit -m "üì¶ Update Flatpak manifest to ${{ steps.version.outputs.tag_name }}

        - Updated tag to ${{ steps.version.outputs.tag_name }}
        - Updated commit hash to ${{ steps.version.outputs.commit_hash }}
        - Automated by GitHub Actions"
        
        git push origin HEAD:main

    - name: Create Flathub PR
      if: steps.update.outputs.manifest_updated == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.FLATHUB_TOKEN }}
      run: |
        FLATHUB_REPO="flathub/io.github.tobagin.tempo"
        BRANCH_NAME="update-${{ steps.version.outputs.tag_name }}"
        
        echo "üîÑ Cloning Flathub repository..."
        git clone https://github.com/$FLATHUB_REPO.git flathub-repo
        cd flathub-repo
        
        git config user.email "action@github.com"
        git config user.name "GitHub Action (Tempo Updates)"
        
        git checkout -b "$BRANCH_NAME"
        
        # Copy the updated manifest
        cp ../packaging/io.github.tobagin.tempo.yml ./io.github.tobagin.tempo.yml
        
        git add io.github.tobagin.tempo.yml
        git commit -m "Update to ${{ steps.version.outputs.tag_name }}

        üöÄ **New Release: ${{ steps.version.outputs.tag_name }}**
        
        **Changes:**
        - Updated tag from previous version to ${{ steps.version.outputs.tag_name }}
        - Updated commit hash to ${{ steps.version.outputs.commit_hash }}
        - Automated update from upstream repository
        
        **Source:** https://github.com/tobagin/Tempo/releases/tag/${{ steps.version.outputs.tag_name }}
        
        ---
        *This PR was automatically created by GitHub Actions*"
        
        git push origin "$BRANCH_NAME"
        
        gh auth login --with-token <<< "$GITHUB_TOKEN"
        
        gh pr create \
          --title "üì¶ Update Tempo to ${{ steps.version.outputs.tag_name }}" \
          --body "üöÄ **Automated update to ${{ steps.version.outputs.tag_name }}**

        This PR updates the Flatpak manifest with the latest release from the upstream repository.

        **Changes:**
        - **Tag:** \`${{ steps.version.outputs.tag_name }}\`
        - **Commit:** \`${{ steps.version.outputs.commit_hash }}\`
        - **Release:** https://github.com/tobagin/Tempo/releases/tag/${{ steps.version.outputs.tag_name }}

        **Automated Checks:**
        - ‚úÖ Manifest syntax validated
        - ‚úÖ Commit hash verified
        - ‚úÖ Tag references confirmed

        ---
        
        **Test Build:**
        The Flathub CI will automatically build and test this update once the PR is created.

        **Merge Instructions:**
        If the test build passes, this PR can be safely merged to publish the update to Flathub.

        ---
        *ü§ñ This PR was automatically created by [GitHub Actions](https://github.com/tobagin/Tempo/actions)*" \
          --head "$BRANCH_NAME" \
          --base "master" \
          --repo "$FLATHUB_REPO"
        
        echo "‚úÖ Created PR: https://github.com/$FLATHUB_REPO/pulls"

    - name: Summary
      if: always()
      run: |
        echo "## üìã Workflow Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Tag:** \`${{ steps.version.outputs.tag_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** \`${{ steps.version.outputs.commit_hash }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** \`${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ steps.update.outputs.manifest_updated }}" == "true" ]]; then
          echo "‚úÖ **Manifest Updated:** Local Flatpak manifest updated and committed" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Flathub PR Created:** Pull request submitted to Flathub repository" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **No Updates:** Manifest update failed or not needed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
        echo "1. Monitor the Flathub PR for CI build status" >> $GITHUB_STEP_SUMMARY
        echo "2. Once CI passes, the Flathub maintainers can merge the PR" >> $GITHUB_STEP_SUMMARY
        echo "3. The new version will be published to Flathub automatically" >> $GITHUB_STEP_SUMMARY